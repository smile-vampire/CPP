
//今年公司年会的奖品特别给力，但获奖的规矩却很奇葩：
//1. 首先，所有人员都将一张写有自己名字的字条放入抽奖箱中；
//2. 待所有字条加入完毕，每人从箱中取一个字条；
//3. 如果抽到的字条上写的就是自己的名字，那么“恭喜你，中奖了！”
//现在告诉你参加晚会的人数，请你计算有多少概率会出现无人获奖？

解题思路：

//当n个编号元素放在n个编号位置，元素编号与位置编号各不对应的方法数用D(n)表示，
//那么D(n-1)就表示n-1个编号元素放在n-1个编号位置，各不对应的方法数，其它类推.
//第一步，把第n个元素放在一个位置，比如位置k，一共有n-1种方法；
//第二步，放编号为k的元素，这时有两种情况：把它放到位置n，那么，对于剩下的n-1个元素，
//由于第k个元素放到了位置n，剩下n-2个元素就有D(n-2)种方法；
//第k个元素不把它放到位置n，这时，对于这n-1个元素，有D(n-1)种方法；
//错排的递推公式是：D(n) = (n - 1)[D(n - 2) + D(n - 1)]，也就是n - 1倍的前两项和。
//通过这个递推公式可以得到在总数为n的时候，错排的可能性一共有多少种。那么要求错排的概率，我们还需要另
//一个数值，就是当总数为n的时候，所有的排列组合一共有多少种，那么根据排列组合，肯定是使用
//的公式来求，也就是n的阶乘。所以结果很简单，就是用公式求出第n项的错排种类，和n的阶乘，然后两者一除，
//就是概率了。


#include <iostream>
#include <cstdio>
int main()
{
	long long d[22] = { 0, 0, 1 }; // 错排数量，预留第一项为0，配合下文中输入的n
	long long f[22] = { 0, 1, 2 }; // 阶乘
	for (int i = 3; i < 22; i++)
	{
		d[i] = (i - 1) * (d[i - 1] + d[i - 2]); //错排的递推公式
		f[i] = i * f[i - 1]; //阶乘的递推公式
	}
	int n;
	while (std::cin >> n)
	{
		printf("%.2f%\n", 100.0 * d[n] / f[n]); //用100.0来把结果处理成double，保留两位小数
	}
	return 0;
}